// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "ClawSub.h"
#include "../Commands/clawCmd.h"
#include "../RobotMap.h"// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
bool forward=false;
ClawSub::ClawSub() : Subsystem("ClawSub") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	clawElbow = RobotMap::clawSubclawElbow;
	clawShoulder = RobotMap::clawSubclawShoulder;
	shoulderTopLS = RobotMap::clawSubshoulderTopLS;
	shoulderBottomLS = RobotMap::clawSubshoulderBottomLS;
	elbowTopLS = RobotMap::clawSubelbowTopLS;
	elbowBottomLS = RobotMap::clawSubelbowBottomLS;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void ClawSub::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new clawCmd());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
/*
void ClawSub::goForward(Joystick* stick){
if(stick->GetRawButton(1)){
	testSpike->Set(Relay::kForward);
	forward=true;
}else if(!goBack(stick)){//(only checks if it not going forward) if it is going back the it returns true;
	testSpike->Set(Relay::kOff);
	forward=false;
}printf(":P\n");
}
bool ClawSub::goBack(Joystick* stick){
	if(stick->GetRawButton(2)&&!forward){
		testSpike->Set(Relay::kReverse);
		return true;
	}
	return false;
}*/
void ClawSub::run(Joystick* stick){
	int angle = stick->GetPOV();
	/*
	 * first Shoulder
	 * second elbow
	 * FF FO FR
	 * OF OO OR
	 * RF RO RR
	 */
	printf("%i\n",angle);
	switch(angle){//goes through each case and checks if it is equal to it
	case 315://top left
		printf("TADA");
		if(shoulderTopLS->Get())
			shoulderForward();
		else
			clawShoulder->Set(Relay::kOff);
		if(elbowTopLS->Get())
			elbowForward();
		else
			clawElbow->Set(Relay::kOff);
		break;//must be here
	case 270://middle left

		if(shoulderTopLS->Get()){
			printf("MEH");
			shoulderForward();
		}else
			clawShoulder->Set(Relay::kOff);
		clawElbow->Set(Relay::kOff);
		break;//must be here
	case 225://bottom left
		printf("I");
		if(shoulderTopLS->Get())
			shoulderForward();
		else
			clawShoulder->Set(Relay::kOff);
		if(elbowBottomLS->Get())
			elbowBack();
		else
			clawElbow->Set(Relay::kOff);
		break;//must be here
	case 180://bottom middle
		clawShoulder->Set(Relay::kOff);
		if(elbowBottomLS->Get())
			elbowBack();
		else
			clawElbow->Set(Relay::kOff);
		break;//must be here
	case 135://bottom middle
		if(shoulderBottomLS->Get())
			shoulderBack();
		else
			clawShoulder->Set(Relay::kOff);
		if(elbowBottomLS->Get())
			elbowBack();
		else
			clawElbow->Set(Relay::kOff);
		break;//must be here
	case 90://middle right
		if(shoulderBottomLS->Get())
			shoulderBack();
		else
			clawShoulder->Set(Relay::kOff);
		clawElbow->Set(Relay::kOff);
		break;//must be here
	case 45://top right
		if(shoulderBottomLS->Get())
			shoulderBack();
		else
			clawShoulder->Set(Relay::kOff);
		if(elbowTopLS->Get())
			elbowForward();
		else
			clawElbow->Set(Relay::kOff);
		break;//must be here
	case 0://top middle
		clawShoulder->Set(Relay::kOff);
		if(elbowTopLS->Get())
			elbowForward();
		else
			clawElbow->Set(Relay::kOff);
		break;
	default://middle middle
		clawShoulder->Set(Relay::kOff);
		clawElbow->Set(Relay::kOff);
		break;//just 'cuz
	}
}
void ClawSub::shoulderBack(){
	clawShoulder->Set(Relay::kReverse);
}
void ClawSub::shoulderForward(){
	printf("SHOULDER FORWARD");
	clawShoulder->Set(Relay::kForward);
}
void ClawSub::elbowBack(){
	clawElbow->Set(Relay::kReverse);
}
void ClawSub::elbowForward(){
	clawElbow->Set(Relay::kForward);
}
